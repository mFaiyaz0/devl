import pandas as pd
# Read the CSV file (replace 'your_file.csv' with the actual file
path)
df = pd.read_csv(r"D:\Downloads\employees.csv")
# Display the first few rows of the dataset
df.head()
EMPLOYEE_ID FIRST_NAME LAST_NAME EMAIL PHONE_NUMBER
HIRE_DATE \

0 198 Donald OConnell DOCONNEL 650.507.9833 21-JUN-
07

1 199 Douglas Grant DGRANT 650.507.9844 13-JAN-
08

2 200 Jennifer Whalen JWHALEN 515.123.4444 17-SEP-
03

3 201 Michael Hartstein MHARTSTE 515.123.5555 17-FEB-
04

4 202 Pat Fay PFAY 603.123.6666 17-AUG-
05

JOB_ID SALARY COMMISSION_PCT MANAGER_ID DEPARTMENT_ID
0 SH_CLERK 2600 - 124 50
1 SH_CLERK 2600 - 124 50
2 AD_ASST 4400 - 101 10
3 MK_MAN 13000 - 100 20
4 MK_REP 6000 - 201 20
import pandas as pd
# Check for missing values in each column
missing_values = df.isnull().sum()
# Option 1: Drop rows with missing values (if appropriate)
if missing_values.sum() > 0:
df = df.dropna()
# Check again for missing values to confirm
missing_values_after_handling = df.isnull().sum()
print("Missing values before handling:")
print(missing_values)
print("\nMissing values after handling:")
print(missing_values_after_handling)
Missing values before handling:
EMPLOYEE_ID 0
FIRST_NAME 0
LAST_NAME 0

EMAIL 0
PHONE_NUMBER 0
HIRE_DATE 0
JOB_ID 0
SALARY 0
COMMISSION_PCT 0
MANAGER_ID 0
DEPARTMENT_ID 0
dtype: int64
Missing values after handling:
EMPLOYEE_ID 0
FIRST_NAME 0
LAST_NAME 0
EMAIL 0
PHONE_NUMBER 0
HIRE_DATE 0
JOB_ID 0
SALARY 0
COMMISSION_PCT 0
MANAGER_ID 0
DEPARTMENT_ID 0
dtype: int64
# Check for duplicates
df.duplicated().sum()
# Remove duplicate rows
df = df.drop_duplicates()
# Confirm that no duplicates remain
df.duplicated().sum()
np.int64(0)
# Rename specific columns (example)
df.rename(columns={'LAST_NAME': 'Surname'}, inplace=True)
# Option to rename all columns at once
# df.columns = ['new_column1', 'new_column2', 'new_column3']
# Function to remove outliers based on IQR
def remove_outliers_iqr(df, columns):
for col in columns:
Q1 = df[col].quantile(0.25)
Q3 = df[col].quantile(0.75)
IQR = Q3 - Q1
lower_bound = Q1 - 1.5 * IQR
upper_bound = Q3 + 1.5 * IQR
df = df[(df[col] >= lower_bound) & (df[col] <= upper_bound)]
return df

# Apply the IQR method to numeric columns
numeric_columns = df.select_dtypes(include=['float64',
'int64']).columns
df = remove_outliers_iqr(df, numeric_columns)
# Verify that outliers have been removed by checking the data range
df.describe()
EMPLOYEE_ID SALARY DEPARTMENT_ID
count 26.000000 26.000000 26.000000
mean 125.192308 4200.000000 51.923077
std 11.496153 2152.022305 4.019185
min 103.000000 2100.000000 50.000000
25% 121.250000 2550.000000 50.000000
50% 127.500000 3250.000000 50.000000
75% 133.750000 5550.000000 50.000000
max 140.000000 9000.000000 60.000000
# Replace specific values in a column (example)
df['JOB_ID'] = df['JOB_ID'].replace({'IT_PROG': 'Programmer'})
# Replace multiple values in a column
# df['column_name'] = df['column_name'].replace({'old_value1':
'new_value1', 'old_value2': 'new_value2'})
# Convert a specific column to float
df['MANAGER_ID'] = df['MANAGER_ID'].astype('float')
# Convert a specific column to datetime
# df['date_column'] = pd.to_datetime(df['date_column'])
# Remove leading/trailing whitespace from a string column
df['FIRST_NAME'] = df['FIRST_NAME'].str.strip()
# Convert string column to lowercase
df['FIRST_NAME'] = df['FIRST_NAME'].str.lower()
# Reset the index of the DataFrame
df.reset_index(drop=True, inplace=True)
# Set a specific column as the index
# df.set_index('column_name', inplace=True)
# Export the cleaned dataset to a new CSV file
df.to_csv('cleaned_dataset.csv', index=False)
# Check if the new CSV file is saved correctly
df.head()

EMPLOYEE_ID FIRST_NAME Surname EMAIL PHONE_NUMBER
HIRE_DATE \

0 103 alexander Hunold AHUNOLD 590.423.4567 03-JAN-
06

1 104 bruce Ernst BERNST 590.423.4568 21-MAY-
07

2 105 david Austin DAUSTIN 590.423.4569 25-JUN-
05

3 106 valli Pataballa VPATABAL 590.423.4560 05-FEB-
06

4 107 diana Lorentz DLORENTZ 590.423.5567 07-FEB-
07

JOB_ID SALARY COMMISSION_PCT MANAGER_ID DEPARTMENT_ID
0 Programmer 9000 - 102.0 60
1 Programmer 6000 - 103.0 60
2 Programmer 4800 - 103.0 60
3 Programmer 4800 - 103.0 60
4 Programmer 4200 - 103.0 60
